axis.text = element_text(size = 12),
legend.text = element_text(size = 13))
#Diagnosis KM --SIG
survfit2(Surv(time, status)~diagnosis,data=brain_tibble_nona) |>
ggsurvfit(linewidth = 1) +
add_confidence_interval("lines") + # add confidence interval
add_quantile(y_value = 0.5, color = "gray50", linewidth = 0.75)+  # Specify median survival
labs(title = "Survival Probability by Diagnosis",
x="Time (Months)",
color="Diagnosis")+
scale_x_continuous(breaks = seq(0,90,by=10))+
add_pvalue("annotation", x=2, y=0.25) +
scale_color_manual(values = c("#6CE5E8", "#41B8D5", "#2F5F98", "#31356E"))+
scale_fill_manual(values = c("#6CE5E8", "#41B8D5", "#2F5F98", "#31356E")) +
theme(text = element_text(size = 13),
plot.title = element_text(hjust = 0.5, size = 18),
plot.background = element_rect(fill = "#F2F4F5"),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "#F2F4F5"),
legend.background = element_rect(fill = "#F2F4F5"),
legend.title = element_text(hjust = 0.5, size = 13),
legend.position = "right",
axis.title = element_text(size = 13),
axis.text = element_text(size = 12),
legend.text = element_text(size = 13))
#Loc KM --NSIG
survfit2(Surv(time, status)~loc,data=brain_tibble) |>
ggsurvfit(linewidth = 1) +
add_confidence_interval("lines") + # add confidence interval
add_quantile(y_value = 0.5, color = "gray50", linewidth = 0.75)+  # Specify median survival
labs(title = "Survival Probability by Tumor Location",
x="Time (Months)",
color="Tumor Location")+
scale_x_continuous(breaks = seq(0,90,by=10))+
add_pvalue("annotation", x=2, y=0.25) +
scale_color_manual(values = c("#6CE5E8", "#31356E"))+
scale_fill_manual(values = c("#6CE5E8", "#31356E")) +
theme(plot.title = element_text(hjust = 0.5, size = 18),
plot.background = element_rect(fill = "#F2F4F5"),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "#F2F4F5"),
legend.background = element_rect(fill = "#F2F4F5"),
legend.title = element_text(hjust = 0.5, size = 13),
legend.position = "right",
axis.title = element_text(size = 13),
axis.text = element_text(size = 12),
legend.text = element_text(size = 13))
survfit2(Surv(time, status)~kicat,data=brain_tibble) |>
ggsurvfit(linewidth = 1) +
add_confidence_interval("lines") + # add confidence interval
add_quantile(y_value = 0.5, color = "gray50", linewidth = 0.75)+  # Specify median survival
labs(title = "Survival Probability by Karnofsky Index",
x="Time (Months)",
color="Karnofsky Index")+
scale_x_continuous(breaks = seq(0,90,by=10))+
add_pvalue("annotation", x=2, y=0.25) +
scale_color_manual(labels = c("KI<80", "KI>=80"), values = c("#6CE5E8", "#31356E"))+
scale_fill_manual(values = c("#6CE5E8", "#31356E")) +
theme(plot.title = element_text(hjust = 0.5, size = 18),
plot.background = element_rect(fill = "#F2F4F5"),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "#F2F4F5"),
legend.background = element_rect(fill = "#F2F4F5"),
legend.title = element_text(hjust = 0.5, size = 13),
legend.position = "right",
axis.title = element_text(size = 13),
axis.text = element_text(size = 12),
legend.text = element_text(size = 13))
survfit2(Surv(time, status)~gtvcat,data=brain_tibble) |>
ggsurvfit(linewidth = 1) +
add_confidence_interval("lines") + # add confidence interval
add_quantile(y_value = 0.5, color = "gray50", linewidth = 0.75)+  # Specify median survival
labs(title = "Survival Probability by Gross Tumor Volume",
x="Time (Months)",
color="Gross Tumor Volume (cm^3)")+
scale_x_continuous(breaks = seq(0,90,by=10))+
add_pvalue("annotation", x=2.3, y=0.25) +
scale_color_manual(labels = c("GTV<=15", "15<GTV<=30", "GTV>30"), values = c("#6CE5E8", "#41B8D5", "#31356E"))+
scale_fill_manual(values = c("#6CE5E8", "#41B8D5", "#31356E")) +
theme(plot.title = element_text(hjust = 0.5, size = 18),
plot.background = element_rect(fill = "#F2F4F5"),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "#F2F4F5"),
legend.background = element_rect(fill = "#F2F4F5"),
legend.title = element_text(hjust = 0.5, size = 13),
legend.position = "right",
axis.title = element_text(size = 13),
axis.text = element_text(size = 12),
legend.text = element_text(size = 13))
#Stereo KM --SIG
survfit2(Surv(time, status)~stereo,data=brain_tibble) |>
ggsurvfit(linewidth = 1) +
add_confidence_interval("lines") + # add confidence interval
add_quantile(y_value = 0.5, color = "gray50", linewidth = 0.75)+  # Specify median survival
labs(title = "Survival Probability by Stereotactic Method",
x="Time (Months)",
color="Stereotactic Method")+
scale_x_continuous(breaks = seq(0,90,by=10))+
add_pvalue("annotation", x=2, y=0.25) +
scale_color_manual(values = c("#6CE5E8", "#31356E"))+
scale_fill_manual(values = c("#6CE5E8", "#31356E")) +
theme(plot.title = element_text(hjust = 0.5, size = 18),
plot.background = element_rect(fill = "#F2F4F5"),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "#F2F4F5"),
legend.background = element_rect(fill = "#F2F4F5"),
legend.title = element_text(hjust = 0.5, size = 13),
legend.position = "right",
axis.title = element_text(size = 13),
axis.text = element_text(size = 12),
legend.text = element_text(size = 13))
library(rgl)
options(rgl.useNULL = TRUE)
library(ISLR2)
library(tibble)
library(ggplot2)
library(survival)
library(tidyverse)
library(survminer)
library(ggpubr)
library(ggsurvfit)
library(RColorBrewer)
library(gt)
#Open Brain Cancer Data
data(BrainCancer)
summary(BrainCancer)
#make table for display
brain_tibble<-as_tibble(BrainCancer)
#tibble without the NA values
brain_tibble_nona <- na.omit(brain_tibble)
#diagnosis vs. sex -- NOT SIGNIFICANT
#set up contingency table
num.m.meningioma <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Male" & brain_tibble_nona$diagnosis=="Meningioma",])
num.f.meningioma <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Female" & brain_tibble_nona$diagnosis=="Meningioma",])
num.m.hgglioma <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Male" & brain_tibble_nona$diagnosis=="HG glioma",])
num.f.hgglioma <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Female" & brain_tibble_nona$diagnosis=="HG glioma",])
num.m.lgglioma <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Male" & brain_tibble_nona$diagnosis=="LG glioma",])
num.f.lgglioma <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Female" & brain_tibble_nona$diagnosis=="LG glioma",])
num.m.other <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Male" & brain_tibble_nona$diagnosis=="Other",])
num.f.other <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Female" & brain_tibble_nona$diagnosis=="Other",])
dia.sex.contigencytbl <- matrix(c(num.m.meningioma, num.f.meningioma,
num.m.hgglioma, num.f.hgglioma,
num.m.lgglioma, num.f.lgglioma,
num.m.other, num.f.other),ncol=2,nrow=4,byrow = T)
dia.sex.contigencytbl
row.names(dia.sex.contigencytbl) <- c("Meningioma","HG glioma","LG glioma", "Other")
colnames(dia.sex.contigencytbl) <- c("Male", "Female")
dia.sex.contigencytbl
#perform chi squared test, but it is not valid because less than 80% of expected frequencies are more than 5
chi_test <- chisq.test(dia.sex.contigencytbl, correct = F)
chi_test
chi_test$observed
chi_test$expected
#perform fisher exact test
fisher <- fisher.test(dia.sex.contigencytbl)
fisher
library(rgl)
options(rgl.useNULL = TRUE)
library(ISLR2)
library(tibble)
library(ggplot2)
library(survival)
library(tidyverse)
library(survminer)
library(ggpubr)
library(ggsurvfit)
library(RColorBrewer)
library(gt)
BrainCancer
typeof(BrainCancer)
typeof(as.data.frame(BrainCancer))
view(BrainCancer)
#Open Brain Cancer Data
data(BrainCancer)
summary(BrainCancer)
#make table for display
brain_tibble<-as_tibble(BrainCancer)
typeof(brain_tibble)
#tibble without the NA values
brain_tibble_nona <- na.omit(brain_tibble)
brain_tibble_nona <- as.data.frame(brain_tibble_nona)
#diagnosis vs. sex -- NOT SIGNIFICANT
#set up contingency table
num.m.meningioma <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Male" & brain_tibble_nona$diagnosis=="Meningioma",])
num.f.meningioma <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Female" & brain_tibble_nona$diagnosis=="Meningioma",])
num.m.hgglioma <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Male" & brain_tibble_nona$diagnosis=="HG glioma",])
num.f.hgglioma <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Female" & brain_tibble_nona$diagnosis=="HG glioma",])
num.m.lgglioma <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Male" & brain_tibble_nona$diagnosis=="LG glioma",])
num.f.lgglioma <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Female" & brain_tibble_nona$diagnosis=="LG glioma",])
num.m.other <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Male" & brain_tibble_nona$diagnosis=="Other",])
num.f.other <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Female" & brain_tibble_nona$diagnosis=="Other",])
dia.sex.contigencytbl <- matrix(c(num.m.meningioma, num.f.meningioma,
num.m.hgglioma, num.f.hgglioma,
num.m.lgglioma, num.f.lgglioma,
num.m.other, num.f.other),ncol=2,nrow=4,byrow = T)
row.names(dia.sex.contigencytbl) <- c("Meningioma","HG glioma","LG glioma", "Other")
colnames(dia.sex.contigencytbl) <- c("Male", "Female")
dia.sex.contigencytbl
#perform chi squared test, but it is not valid because less than 80% of expected frequencies are more than 5
chi_test <- chisq.test(dia.sex.contigencytbl, correct = F)
chi_test
chi_test$observed
chi_test$expected
#perform fisher exact test
fisher <- fisher.test(dia.sex.contigencytbl)
fisher
library(rgl)
options(rgl.useNULL = TRUE)
library(ISLR2)
library(tibble)
library(ggplot2)
library(survival)
library(tidyverse)
library(survminer)
library(ggpubr)
library(ggsurvfit)
library(RColorBrewer)
library(gt)
#Open Brain Cancer Data
data(BrainCancer)
summary(BrainCancer)
#make table for display
brain_tibble<-as_tibble(BrainCancer)
View(brain_tibble)
#combine lgglioma and other diagnosis into one group
brain_tibble$diagnosis[brain_tibble$diagnosis=="LG glioma"]="LG/Other"
brain_tibble$diagnosis[brain_tibble$diagnosis=="Other"]="LG/Other"
View(brain_tibble)
#make table for display
brain_tibble<-as_tibble(BrainCancer)
#combine lgglioma and other diagnosis into one group
brain_tibble$diagnosis[brain_tibble$diagnosis=="LG glioma"]=as.factor("LG/Other")
#make table for display
brain_tibble<-as_tibble(BrainCancer)
View(brain_tibble)
str(brain_tibble)
#combine lgglioma and other diagnosis into one group
levels(brain_tibble$diagnosis)[levels(brain_tibble$diagnosis)=="LG glioma"]="LG/Other"
View(brain_tibble)
levels(brain_tibble$diagnosis)[levels(brain_tibble$diagnosis)=="Other"]="LG/Other"
#tibble without the NA values
brain_tibble_nona <- na.omit(brain_tibble)
#diagnosis distribution
num.dias <- matrix(c(nrow(brain_tibble_nona[brain_tibble_nona$diagnosis=='Meningioma',]), nrow(brain_tibble_nona[brain_tibble_nona$diagnosis=='HG glioma',]), nrow(brain_tibble_nona[brain_tibble_nona$diagnosis=='LG glioma',]), nrow(brain_tibble_nona[brain_tibble_nona$diagnosis=='Other',])),ncol=4,nrow=1,byrow = T)
row.names(num.dias) <- c("Amount of Patients")
colnames(num.dias) <- c("Meningioma", "HG Glioma", "LG Glioma")#, "Other")
num.dias <- data.frame(
diagnosis=colnames(num.dias),
patients=c(num.dias[1], num.dias[2], num.dias[3], num.dias[4])
)
#pie chart
num.dias$fraction = num.dias$patients / sum(num.dias$patients)
# Compute the cumulative percentages (top of each rectangle)
num.dias$ymax = cumsum(num.dias$fraction)
# Compute the bottom of each rectangle
num.dias$ymin = c(0, head(num.dias$ymax, n=-1))
# Compute label position
num.dias$labelPosition <- (num.dias$ymax + num.dias$ymin) / 2
# Compute a good label
num.dias$label <- paste0(num.dias$diagnosis, "\n Patients: ", num.dias$patients)
# Make the plot
ggplot(num.dias, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=diagnosis)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=4) +
scale_fill_manual(values=c("#6CE5E8", "#41B8D5", "#2D8BBA", "#2F5F98")) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
ggtitle("Amount of Patients with Each Diagnosis")+
theme_void() +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5, size=18),
plot.background = element_rect(fill = "#F2F4F5"))
str(brain_tibble)
#clear out env
rm(list=ls())
graphics.off()
#Open Brain Cancer Data
data(BrainCancer)
summary(BrainCancer)
#make table for display
brain_tibble<-as_tibble(BrainCancer)
gt_tbl <-
gt(brain_tibble[1:8,]) |>
tab_header(
title = "Primary Brain Tumor Patients",
) |>
tab_source_note(
source_note = "Source: I. Selingerova, H. Dolezelova, I. Horova, S. Katina, and J. Zelinka. Survival of patients with primary brain tumors: Comparison of two statistical approaches. PLoS One, 11(2):e0148733, 2016. https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4749663/"
) |>
tab_source_note(
source_note = md("Reference: James, G., Witten, D., Hastie, T., and Tibshirani, R. (2021) An Introduction to Statistical Learning with applications in R, Second Edition, https://www.statlearning.com, Springer-Verlag, New York")
)
gt_tbl
#diagnosis vs. sex -- NOT SIGNIFICANT
#set up contingency table
num.m.meningioma <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Male" & brain_tibble_nona$diagnosis=="Meningioma",])
num.f.meningioma <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Female" & brain_tibble_nona$diagnosis=="Meningioma",])
num.m.hgglioma <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Male" & brain_tibble_nona$diagnosis=="HG glioma",])
num.f.hgglioma <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Female" & brain_tibble_nona$diagnosis=="HG glioma",])
num.m.lgglioma <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Male" & brain_tibble_nona$diagnosis=="LG glioma",])
num.f.lgglioma <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Female" & brain_tibble_nona$diagnosis=="LG glioma",])
num.m.other <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Male" & brain_tibble_nona$diagnosis=="Other",])
num.f.other <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Female" & brain_tibble_nona$diagnosis=="Other",])
dia.sex.contigencytbl <- matrix(c(num.m.meningioma, num.f.meningioma,
num.m.hgglioma, num.f.hgglioma,
num.m.lgglioma, num.f.lgglioma,
num.m.other, num.f.other),ncol=2,nrow=4,byrow = T)
row.names(dia.sex.contigencytbl) <- c("Meningioma","HG glioma","LG glioma", "Other")
colnames(dia.sex.contigencytbl) <- c("Male", "Female")
#tibble without the NA values
brain_tibble_nona <- na.omit(brain_tibble)
#diagnosis vs. sex -- NOT SIGNIFICANT
#set up contingency table
num.m.meningioma <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Male" & brain_tibble_nona$diagnosis=="Meningioma",])
num.f.meningioma <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Female" & brain_tibble_nona$diagnosis=="Meningioma",])
num.m.hgglioma <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Male" & brain_tibble_nona$diagnosis=="HG glioma",])
num.f.hgglioma <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Female" & brain_tibble_nona$diagnosis=="HG glioma",])
num.m.lgglioma <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Male" & brain_tibble_nona$diagnosis=="LG glioma",])
num.f.lgglioma <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Female" & brain_tibble_nona$diagnosis=="LG glioma",])
num.m.other <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Male" & brain_tibble_nona$diagnosis=="Other",])
num.f.other <- nrow(brain_tibble_nona[brain_tibble_nona$sex=="Female" & brain_tibble_nona$diagnosis=="Other",])
dia.sex.contigencytbl <- matrix(c(num.m.meningioma, num.f.meningioma,
num.m.hgglioma, num.f.hgglioma,
num.m.lgglioma, num.f.lgglioma,
num.m.other, num.f.other),ncol=2,nrow=4,byrow = T)
row.names(dia.sex.contigencytbl) <- c("Meningioma","HG glioma","LG glioma", "Other")
colnames(dia.sex.contigencytbl) <- c("Male", "Female")
#perform chi squared test, but it is not valid because less than 80% of expected frequencies are more than 5
chi_test <- chisq.test(dia.sex.contigencytbl, correct = F)
chi_test
chi_test$observed
chi_test$expected
#perform fisher exact test
fisher <- fisher.test(dia.sex.contigencytbl)
fisher
R
gc()
library(metafor)
library(metadat)
data("dat.linde2005")
df <- na.omit(dat.linde2005[-c(1,12),c(1:4,13:17)]) # we use just a subset
View(df)
View(df)
log_OR_1 <-
log((df$ai[1] / (df$n1i[1] - df$ai[1])) /
(df$ci[1] / (df$n2i[1] - df$ci[1])))
# With variance
var_log_OR_1 <- 1/df$ai[1]+
1/(df$n1i[1]-df$ai[1])+
1/df$ci[1]+
1/(df$n2i[1]-df$ci[1])
# With associated approximate CI
log_OR_1+c(-1,1)*qnorm(.975)*sqrt(var_log_OR_1)
df_enriched <- escalc(
measure = "OR",
ai = ai,
bi = n1i - ai,
ci = ci,
di = n2i - ci,
data = df,
append = TRUE
)
View(df_enriched)
head(df_enriched)
fit_FEM <- rma(
yi = yi,
vi = vi,
method = "FE",
data = df_enriched
)
# Theta is simply
coef(fit_FEM)
weighted.mean(x = df_enriched$yi,w = 1/df_enriched$vi)
x11()
# Forest plot
forest(fit_FEM,
slab = paste(df_enriched$study, df_enriched$year, sep = ", "))
# Or in the exp scale
forest(
fit_FEM,
slab = paste(df_enriched$study, df_enriched$year, sep = ", "),
atransf = exp
)
# Funnel plot
funnel(fit_FEM, main="Standard Error")
funnel(fit_FEM, yaxis="vi", main="Sampling Variance")
funnel(fit_FEM, yaxis="seinv", main="Inverse Standard Error")
funnel(fit_FEM, yaxis="vinv", main="Inverse Sampling Variance")
fit_REM <- rma(yi =yi,vi = vi,method = "REML",data = df_enriched)
fit_REM
# Theta is
coef(fit_REM)
weighted.mean(x = df_enriched$yi,
w = 1 / (fit_REM$tau2 + df_enriched$vi))
# Forest plot
forest(fit_REM, slab = paste(df_enriched$study, df_enriched$year, sep = ", "))
fit_FEM
# Q statistic manual calc
Q_man <- sum((1/df_enriched$vi)*
(df_enriched$yi-coef(fit_FEM))^2)
# I^2 manual calc
max(0,(Q_man-21)/Q_man)*100
fit_REM_mod <-
rma(
yi = yi,
vi = vi,
mods = ~ factor(group)-1,
method = "REML",
data = df_enriched
)
# predicted average risk ratio for each level of the stratification variable
predict(fit_REM_mod, newmods=diag(4), transf=exp, digits=2)
library(lattice)
library(survival)
library(survminer)
rm(list=ls())
# Dataset veteran of survival package.
veteran <- survival::veteran
dim(veteran)
head(veteran)
# Convert covariate trt to factor
veteran$trt <- factor(veteran$trt,labels=c('standard','test'))
veteran$prior <- as.factor(veteran$prior)
cox.mod <- coxph(Surv(time, status) ~ trt + prior + karno, veteran)
summary(cox.mod)
# Check for PH assumption
zp <- cox.zph(cox.mod)
zp
plot(cox.zph(cox.mod, transform="identity")[3])
abline(0,0, col=2)
abline(h=coef(cox.mod)[3], col=3, lwd=2, lty=2)
plot(cox.zph(cox.mod, transform="identity")[3], xlim=c(0,180))
abline(0,0, col=2)
abline(h=coef(cox.mod)[3], col=3, lwd=2, lty=2)
vet2 <- survSplit(Surv(time, status) ~ ., data= veteran, cut=c(90, 180),
episode= "tgroup", id="id")
vet2[1:7, c("id", "tstart", "time", "status", "tgroup", "age", "karno")]
cox.step <- coxph(Surv(tstart, time, status) ~ trt + prior + karno:strata(tgroup), data=vet2)
summary(cox.step)
zp2<-cox.zph(cox.step)
zp2
BiocManager::install("recount3")
BiocManager::install(c(
"GenomicRanges", "limma", "edgeR", "DESeq2",
"regionReport", "clusterProfiler", "org.Hs.eg.db", "gplots",
"derfinder", "GenomicState", "bumphunter", "derfinderPlot", "sessioninfo"
))
install.packages("tidyverse")
install.packages('Seurat')
BiocManager::install("org.Hs.eg.db")
BiocManager::install("GenomicState")
BiocManager::install("org.Hs.eg.db")
is.numeric(=)
is.numeric("=")
is.numeric(3)
is.numeric("3")
as.integer("3")
as.integer("=")
as.integer("H")
suppressWarnings(as.integer("H"))
library(Rsamtools)
library(Rsamtools)
getwd()
library(Rsamtools)
library(BSgenome.Hsapiens.UCSC.hg19)
library(GenomicRanges)
setwd("C:/Users/meemo/Downloads/Scientific Programming/r_proj")
fn<-unlist(strsplit(bamf, '[.]'))
fn<-unlist(strsplit("ex_bam.bam", '[.]'))
fn[-1]
system.file("extdata", "ex_bam.bam",package = "readAlign")
setwd("C:/Users/meemo/Downloads/Scientific Programming/r_proj/readAlign")
setwd("C:/Users/meemo/Downloads/Scientific Programming/r_proj/readAlign")
system.file("extdata", "ex_bam.bam",package = "readAlign")
file.exists(system.file("extdata", "ex_bam.bam",package = "readAlign"))
t <- ["one", "two", "three"]
t <- c("one", "two", "three")
t[-1]
tail(t)
tail(t, n=1)
alignment <- function(cigar, cigardf, read, ref, makedf){
#M, =, X, S: leave as is
#I: add dashes to the reference seq
#D, P, N: add dashes to the read seq
#H: add dashes to beginning/end of the read seq
#define as global variables so they can be properly altered with lapply
my.env$alignedread <-read
my.env$alignedref <-ref
#find indexes where dashes are being inserted
idxchng <- which(cigardf[,2]!='M'&cigardf[,2]!='X'&
cigardf[,2]!='='&cigardf[,2]!='S')
#apply alterations using the indexes that call for it
lapply(idxchng, alter.reads, cdf=cigardf)
if (makedf){
row <- data.frame(cigar, my.env$alignedref, my.env$alignedread)
names(row) <- c("CIGAR", "Ref.", "Read")
my.env$aligndf <- rbind(my.env$aligndf, row)
} else{ #print
#print aligned read
print(paste0("CIGAR: ", cigar))
print(paste0("Ref.: ", my.env$alignedref))
print(paste0("Read: ", my.env$alignedread))
}
}
sessionInfo()
seq_len(length(t))
seq_len(length(fn))
